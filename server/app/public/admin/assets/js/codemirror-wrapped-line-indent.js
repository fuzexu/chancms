import{V as t,g as i,D as e,R as n}from"./@codemirror.js";const s=[t.fromClass(class{constructor(t){this.view=t,this.indentUnit=i(t.state),this.initialPaddingLeft=null,this.isChrome=null===window||void 0===window?void 0:window.navigator.userAgent.includes("Chrome"),this.generate(t.state)}update(t){const e=i(t.state);(e!==this.indentUnit||t.docChanged||t.viewportChanged)&&(this.indentUnit=e,this.generate(t.state))}generate(t){const i=new n;this.initialPaddingLeft?this.addStyleToBuilder(i,t,this.initialPaddingLeft):this.view.requestMeasure({read:t=>{const e=t.contentDOM.querySelector(".cm-line");e&&(this.initialPaddingLeft=window.getComputedStyle(e).getPropertyValue("padding-left"),this.addStyleToBuilder(i,t.state,this.initialPaddingLeft)),this.decorations=i.finish()}}),this.decorations=i.finish()}addStyleToBuilder(t,i,n){const s=this.getVisibleLines(i);for(const o of s){const{numColumns:s,containsTab:a}=this.numColumns(o.text,i.tabSize),c="calc(".concat(s+this.indentUnit,"ch + ").concat(n,")"),d=this.isChrome?"calc(-".concat(s+this.indentUnit,"ch - ").concat(a?1:0,"px)"):"-".concat(s+this.indentUnit,"ch");t.add(o.from,o.from,e.line({attributes:{style:"padding-left: ".concat(c,"; text-indent: ").concat(d,";")}}))}}getVisibleLines(t){const i=new Set;let e=null;for(const{from:n,to:s}of this.view.visibleRanges){let o=n;for(;o<=s;){const n=t.doc.lineAt(o);e!==n&&(i.add(n),e=n),o=n.to+1}}return i}numColumns(t,i){let e=0,n=!1;t:for(let s=0;s<t.length;s++)switch(t[s]){case" ":e+=1;continue t;case"\t":e+=i-e%i,n=!0;continue t;case"\r":continue t;default:break t}return{numColumns:e,containsTab:n}}},{decorations:t=>t.decorations})];export{s as w};
